"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
  @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
  users: [User!]! @paginate(defaultCount: 10)
  me: User @auth
  book(id: ID @eq): Book @guard @find
  books(userId: ID @eq): Book @guard @find
  genre(id: ID @eq): Genre @find
  genres(userId: ID @eq): Book @find
  author(id: ID @eq): Author @find
  authors(userId: ID @eq): Book @find
}

type Mutation {
  # book mutations
  createBook(name: String!, author: Author!, Genre: Genre!): Book! @create
  createAuthor(name: String!): Author! @create
  createGenre(name: String!): Genre! @create

  # auth mutations
  login(input: LoginInput @spread): AuthPayload!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
    )
  refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
    )
  logout: LogoutResponse!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
    )
  forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve"
    )
  updateForgottenPassword(
    input: NewPasswordWithCodeInput @spread
  ): ForgotPasswordResponse!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve"
    )
  register(input: RegisterInput @spread): RegisterResponse!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve"
    )
  socialLogin(input: SocialLoginInput! @spread): AuthPayload!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve"
    )
  verifyEmail(input: VerifyEmailInput! @spread): AuthPayload!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve"
    )
  updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse!
    @field(
      resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve"
    )
    @guard(with: ["api"])
}

type User {
  id: ID!
  name: String!
  email: String!
}

type Author {
  id: ID!
  name: String!
}

type Genre {
  id: ID!
  name: String!
}

type Book {
  id: ID!
  name: String!
  author: Author!
  genre: Genre!
}

# type Query {
#   hello(name: String!): String
# }
